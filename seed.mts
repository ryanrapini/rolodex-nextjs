import { SnapletClient } from '@snaplet/seed';

// You can use @snaplet/copycat to generate fake data for a field, for example:
// ```
// await snaplet.users([{ email: ({ seed }) => copycat.email(seed) }])
// ```
// More on this in our docs: https://docs.snaplet.dev/core-concepts/seed#inside-the-snapletseed-workflow
import { copycat } from '@snaplet/copycat'

// This is a basic example generated by Snaplet to start you off, check out the docs for where to go from here
// * For more on getting started with @snaplet/seed: https://docs.snaplet.dev/getting-started/quick-start/seed
// * For a more detailed reference: https://docs.snaplet.dev/core-concepts/seed


const snaplet = new SnapletClient({
  dryRun: process.env.DRY !== '0',
});

// Clears all existing data in the database, but keep the structure
await snaplet.$resetDatabase()


await snaplet.tags([
  {
    name: 'Setter'
  },
  {
    name: 'LS Hitter'
  },
  {
    name: 'RS Hitter'
  },
  {
    name: 'M Hitter'
  },
  {
    name: 'Blocker'
  },
  {
    name: 'DS'
  },
  {
    name: 'RevCo DS'
  },
  {
    name: 'RevCo Hitter'
  },
  {
    name: 'RevCo Setter'
  },
  {
    name: 'Doubles'
  },
  {
    name: 'Indoor'
  },
  {
    name: 'Sand'
  },
  {
    name: 'Male'
  },
  {
    name: 'Female'
  },
])

await snaplet.users([
  {
    name: 'Ryan Rapini',
    password: 'password',
    email: 'ryanrapini@gmail.com',
    contacts: (x) => x(7, (index) => ({
      connect: true
    })),
  },
  {
    name: 'Gary Oak',
    password: 'password',
    email: 'gary@example.com',
    contacts: (x) => x(7, (index) => ({
      connect: true
    })),
  },
  {
    name: 'Ash Ketchum',
    password: 'password',
    email: 'ash@example.com'
  },
])

